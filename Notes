EVERYTHING IS PASSED BY VALUE IN GO

Overall Notes:
Make is used for slices maps and channels (things that need to be initialized before use)
Important things about Go
Everything in Go is passed "by value" (passed by balue of memory)

The "comma ok" idiom
if seconds, ok := timeZone[tz]; ok {
    return seconds
}

Concurrency vs Parallelism
Concurrency: Doing multiple things at different times (drinking coffee & coding)
Parallelism: Doing many things at exactly the same time

Race condition, where two functions add a number or something to the same variable and they both go at the same time, causing only one of them to trigger

Godocs: builtin - things like make() len() copy() close() and stuff like that

Section 1
    Compiler puts in semi-colons automatically
    GoLang.org only std library
    GoDoc.org all libraries (including third party packages)

Section 2
    Go workspace
    One Folder (Any name, any location)
        bin
        pkg
        src
            github.com
                <username>
                    folder with code for project / repo
                    folder with code for project / repo
                    folder with code for project / repo
                    folder with code for project / repo

Section 02:
    Say exported/unexported instead of public/private

Section 03:
    Shorthand:
        can only be used inside func
    var:
        zero value
    Type Format Verb:

Section 06 (Constants):
    Constant is a parallel type which is not a normal type (ex. int string)
    Go is statically typed (cant change after run time)
    There are TYPED and UNTYPED constants
        const hello = "Hello World" // UNTYPED
        const typedHello string = "Hello World" // TYPED


    x := 42     // UNTYPED
    y := x + 19 // 

Source 09 (Type systems) :
    Static - Variable types are assigned at compile time
    Dynamic - Variable types are assigned at run time

Source 10:
    Don't need break; after switch
    Control flow - all of the loops/if else/conditions

Source 11:
    Rune - Character (int32)
    Use '' for rune
    Rune - Alias for int32
    Lexical elements: Relating to words or vocabulary of a language
    25 Keywords in Go
    int32(64)  == Conversion and NOT Casting

    STRINGS:
    Raw String - (`string`) Retains spacing
    Interpreted String - ("string") Removes spacing

Source 14 (Functions):
    Variadic parameter: pass in 0 or more elements for that func (...float64)int {}

Source 17 (Data Structures):
    Array   - Does not change in size and only 1 type of elements
    Slice   - VALUE OF UNINIT SLICE IS NIL 
            - Changes in size (has length & capacity)
    Map     - VALUE OF UNINIT MAP IS NIL

Source 18 (Slices):
    Length and Capacity
    Making a slice - make([]T, length, capacty)
    Slice is almost equivelent to List in other language
    Using make() is the idomadic way of creating a new slice

Source 19 (Maps):
    The value of an unitialized map is NIL
    Maps are reference types
    Always make a map
    Can add a capacity of a map for better hashing and time
    No elements can be added to a nil map

Source 20 (OOP) : Go IS Object Oriented
    (1) Encapsulation: (Create our own type)
    state ("fields")
    behavior ("methods")
    exported / un-exported

    (2) Reusability:
    inheritance ("embedded types")

    (3) Polymorphism:
    interfaces

    (4) Overriding:
    "promotion"

    Struct: Sequence of fields (each has a name and type)
    Anon Field (Embedded field): A field with no name, used for embedding

	INHERITANCE (Reusability)

	Inner type (Person), gets promoted to the outer type (DoubleZero)
	Outer type now has access to inner type
    No instatiation of classes. You create a value of a type in Go
    Struct is a composite type
    The type has an underlying type which is struct


JSON:
    (1) Encoding:
    String: Marshal / Unmarshal
    Stream: Encode / Decode

Interfaces (21) :
    Most important thing about interfaces 01_interface under 21_interfaces
    "Square implements Shape interface"
    Interfaces are just types that just declare behavior
    Go's interfaces are SATISFIED IMPLICITLY
    


Go Routines (22) :
    Mutex - Mutually exclusive object
        So multiple program threads can take turns sharing the same resource
    *Do not communicate by sharing memory; instead, share memory by communicating
    Sempaphore - Plain variable that is changed

Channels (23):
    04_pass-return-channels is extremely helpful when it comes to seeing how go routines work
    chan T          // BIDIRECTIONAL channel
    chan<- float64  // can only be used by the user to send channel
    <-chan int      // can only be used by the user to receive ints
    Race condition: Go routines writing to the same variable
    Deadlock: Never going to meet
    Pipeline:   A design pattern in which the stages connected by channels where each stage is a group of
                go routines running the same functions

    CONCURRENT DESIGN PATTERNS
    1. Pipeline
        Stages connected by channels where each stage is a group of go routines running the same function
    2. Fan Out - Fan In (Multiplexing)
        One channel in and lots of funcs reading the channel until its closed
        One channel out that gets written to by different functions
    
    CONCURRENCY RESOURCES
    1. https://github.com/ardanlabs/gotraining
    2. https://blog.golang.org/

Error Handling (24):
    CSP -   Communicating sequential processes 
            Formal language for describing patterns of interaction in concurrent systems
    Lint -  Unix utility that flags suspicious usage in software written in any computer language
    Niladic - Function that takes no arguments 
    log goes to stdout unless you change the log.SetOutput to a different writer interface
    Fatalln is equivalent to Println() followed by a call to os.Exit(1)
    0 means success and non-zero means an error
    Panic is good if you want to see more of the stack information
    Prefix error vars with Err
    PathError is an error that has more options under the cover, such as the file that called it